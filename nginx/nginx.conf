# Define upstream servers for load balancing
upstream web_servers {
    server web:3000;
    # Additional web servers will be automatically included when scaled
}

upstream api_servers {
    server api:8080;
    # Additional API servers will be automatically included when scaled
}

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=web_limit:10m rate=30r/s;

server {
    listen 80;
    
    # Enable error logging
    error_log /var/log/nginx/error.log debug;
    
    # Security settings
    server_tokens off;
    
    # Add security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK";
    }
    
    # API endpoints with rate limiting
    location /api/ {
        # Apply rate limiting - 10 requests per second with burst of 20
        limit_req zone=api_limit burst=20 nodelay;
        
        # Standard proxy settings
        proxy_pass http://api_servers/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # CORS settings for API
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # API health check with rate limiting
    location /api/health {
        # Apply rate limiting - 10 requests per second with burst of 5
        limit_req zone=api_limit burst=5 nodelay;
        
        proxy_pass http://api_servers/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Web frontend with rate limiting
    location / {
        # Apply rate limiting - 30 requests per second with burst of 50
        limit_req zone=web_limit burst=50 nodelay;
        
        proxy_pass http://web_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Custom error pages
    error_page 429 /rate_limited.html;
    location = /rate_limited.html {
        root /usr/share/nginx/html;
        internal;
    }
} 